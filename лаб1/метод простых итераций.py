from sympy import *
import numpy as np

# Задаем начальное приближение
a = 1 # [-1 ; 3]
a_past = 5 # Переменная запоминает предыдущее значение а
epsilon = 0.1 
module = abs(a - a_past)  # Модуль разности a и a_past
x = symbols('x')

#y = x ** 3 - 3 * x ** 2 - 24 * x + 10
Fi = ( x ** 3 - 3 * x ** 2 + 10 ) / 24 # x = Fi(x)
# Преобразовали f(x) = x ** 3 - 3 * x ** 2 + 12 * x - 12 в Fi(х) = ( x ** 3 - 3 * x ** 2 - 12 ) / -12

def fi(z):
	"========Функция расчета f(x), f(x)' и f(x)'' ================================"
	f = lambdify(x, z, 'numpy')
	return f

y_1 = fi(Fi)
fi_1 = Fi.diff(x) # Взяли производную от Fi(x)
fi_2 = fi(fi_1) # Воспользоваться функцией для f(x)'
module_fi = abs( fi_2( a ) ) # Считаем модуль производной |Fi'(a)|

# Проверяем на сходимость итераций, для этого необходимо чтобы |Fi'(a)| < 1
if module_fi > 1 :
	print("=============================================================================")
	print("Процесс итерации расходится. Попробуйте выбрать другое начальное приближение")
	print("=============================================================================")
	exit()

print("A           |Fi(a)        ||a(i) - a(i-1)|")
n = 1
while module >= epsilon :
	a_past = a # Присваиваем старое значение "а"
	a = y_1(a_past) # Высчитываем новое значение Fi(a)
	module = abs(a - a_past) # Считаем модуль разности |a(i) - a(i-1)|
	#print("%.5f" % a_past, "    ", "%.5f" % a, "     ", "%.5f" % module)
	print("  ", n, "Итерация\nx0 = ", a_past, "\nx = ","%.4f" % a, "\n|x0 - x| =", "%.5f" % module)
	n += 1

print("===============================================================================")
print("Приближенное значение корня равно =", "%.5f" % a, ", |a(i) - a(i-1)|", "%.5f" % module, "<=", epsilon)
print("===============================================================================")